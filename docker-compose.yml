version: '3.8'

# frontend(node),db(MySQL),backend(FastAPI)のコンテナを作成
services:
  frontend:
    # コンテナ名をfrontendに設定
    container_name: frontend
    # frontendのDockerfileをビルドする
    build: 
      # ビルドコンテキストはカレントディレクトリ
      context: ./
      dockerfile: Docker/front_context/Dockerfile
    # ローカルの3000番ポートとコンテナの3000番ポートをつなぐ
    ports:
      - "3000:3000"
    # コンテナ内の環境変数を設定
    environment:
      - NODE_ENV=production
    restart: always
  
  backend:
    depends_on:
      - db
    # コンテナ名をbacktendに設定
    container_name: backend
     # backendのDockerfileをビルドする
    build: 
      context: ./
      dockerfile: Docker/back_context/Dockerfile
    # ローカルの3002番ポートとコンテナの3002番ポートをつなぐ
    ports:
      - 3001:3001
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3001"]
    tty: true

  db:
    container_name: MySQL
    build: 
      context: ./
      dockerfile: Docker/db_context/Dockerfile
    # DBのボリュームを指定
    # ローカルの/data/dbをコンテナの/var/lib/mysqlにマウントする
    volumes:
      - mysql_data:/var/lib/mysql
    # コンテナ内の環境変数を設定
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=todoapp
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    # DBのコンテナのヘルスチェックを行う
    # mysqladmin(MySQLサーバーの管理を行うクライアントを使ってDBコンテナ自身(127.0.0.1)にpingを送ってヘルスチェックを行う
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$MYSQL_USER -p$MYSQL_PASSWORD"]
      # ヘルスチェックのインターバルは10秒
      interval: 10s
      # タイムアウト時間は10秒
      timeout: 10s
      # リトライ回数は3回
      retries: 3
      # ヘルスチェックが失敗しても無視する時間は30秒
      start_period: 30s

volumes:
  mysql_data: